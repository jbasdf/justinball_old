ASSETS_PORT=8080


# ASSETS_URL is used for the webpack server's public path and will set an absolute url
# when loading assets. Not setting a value means the assets will be loaded from the local
# server. This works fine in development and will also work if you attempt to access your
# development server from a remote device (such as a mobile phone) for testing. You can set
# a localhost value if desired however note that doing so will prevent the assets from loading
# properly when attempting to access the server from a remote device.
# ASSETS_URL is mainly in place for situations where the react client starter app is incorporated
# into another project such as Ruby on Rails where there will be multiple servers. In this situation
# the client application will likely be loaded via a link in a page served from the Rail (or other similar)
# server. Since the webpack server will be serving assets on a different port (or domain) we can't use
# the default root path since doing so will result in the scripts requesting assets from the Rails
# server instead of the webpack server. In this instance setting ASSETS_URL will tell webpack to
# build and serve assets from a specific url - the webpack server's url.

# Use localhost
ASSETS_URL=http://0.0.0.0

# Use a local domain.
# Change /etc/hosts (on a mac) and add sites.dev and rcsassets.sites.dev. Each entry will need to point to 127.0.0.1
# ASSETS_URL=http://rcsassets.sites.dev

# Use ngrok: (you will need to start ngrok and point it at 8080 or a different port if you change it.)
# ASSETS_URL=https://rcsassets.ngrok.io
